@{
    Layout = "_Root.Head";

    var additionalClass = String.Empty;
    
    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    bool isHomePage = controllerName.Equals("home", StringComparison.InvariantCultureIgnoreCase);
    if (isHomePage)
    {
        additionalClass = "master-home-page";
    }
}
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyStartHtmlTagAfter })
@await Html.PartialAsync("_Notifications")
@await Html.PartialAsync("_JavaScriptDisabledWarning")
@await Html.PartialAsync("_OldInternetExplorerWarning")

<div class="master-wrapper-page @additionalClass">
    @await Component.InvokeAsync("AdminHeaderLinks")
    @await Html.PartialAsync("_Header")
    <div class="overlayOffCanvas"></div>
    <div class="responsive-nav-wrapper-parent">
        <div class="responsive-nav-wrapper">
            <div class="menu-title">
                <span>@T("SevenSpikes.Themes.Common.MenuTitle")</span>
            </div>
            <div class="search-wrap">
                <span>@T("Search")</span>
            </div>
            <div class="shopping-cart-link">
                <a href="@Url.RouteUrl("ShoppingCart")">@T("ShoppingCart")</a>
            </div>
            <div class="filters-button">
                <span>@T("SevenSpikes.Themes.Common.Filters")</span>
            </div>
            <div class="personal-button" id="header-links-opener">
                <span>@T("SevenSpikes.Themes.Common.Personal")</span>
            </div>
        </div>
    </div>
    <div class="justAFixingDivBefore"></div>
    <div class="header-menu">
        <div class="close-menu">
            <span>@T("SevenSpikes.Themes.Common.CloseMenu")</span>
        </div>
        @{
            var menu = await Component.InvokeAsync("Widget", new { widgetZone = "theme_header_menu" });
            var topMenu = (await Component.InvokeAsync("TopMenu")).ToHtmlString();
        }
        @if (String.IsNullOrEmpty(menu.ToHtmlString()))
        {
                @Html.Raw(topMenu)
        }
        else
        {
                @menu 
        }
    </div>
    <div class="master-wrapper-content">
        <script type="text/javascript" asp-location="Footer">
            AjaxCart.init(false, '.header-links .cart-qty', '.header-links .wishlist-qty', '#flyout-cart');
        </script>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentBefore })
        @*ajax loading window*@
        <div class="ajax-loading-block-window" style="display: none">
            <div class="loading-image">
            </div>
        </div>
        @if (IsSectionDefined("Breadcrumb"))
        {
            @RenderSection("Breadcrumb")
        }
        <div class="master-column-wrapper">
            @RenderBody()
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentAfter })
    </div>
</div>
@await Component.InvokeAsync("Footer")
@await Component.InvokeAsync("EuCookieLaw")
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyEndHtmlTagBefore })
