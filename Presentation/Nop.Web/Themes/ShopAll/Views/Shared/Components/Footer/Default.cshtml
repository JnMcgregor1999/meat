@model FooterModel
@using Nop.Core
@using Nop.Services.Configuration
@using Nop.Core.Domain.Tax

@inject IWorkContext workContext
@inject IStoreContext storeContext
@inject ISettingService settingService

@{
    var storeId = storeContext.CurrentStore.Id;
    var removeDesignedBy = settingService.GetSettingByKey("tiffanythemesettings.removedesignedby", false, storeId, true);
    var removeCopyright = settingService.GetSettingByKey("tiffanythemesettings.removecopyright", false, storeId, true);
}

<div class="footer">
    <div class="custom-footer-wrapper">
        <div class="footer-upper">
            <ul class="footer-nav">
                @if (Model.RecentlyViewedProductsEnabled && Model.DisplayRecentlyViewedProductsFooterItem)
                {
                    <li><a href="@Url.RouteUrl("RecentlyViewedProducts")">@T("Products.RecentlyViewedProducts")</a></li>
                }
                @if (Model.CompareProductsEnabled && Model.DisplayCompareProductsFooterItem)
                {
                    <li><a href="@Url.RouteUrl("CompareProducts")">@T("Products.Compare.List")</a></li>
                }
                @if (Model.BlogEnabled && Model.DisplayBlogFooterItem)
                {
                    <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
                }
                @if (Model.NewsEnabled && Model.DisplayNewsFooterItem)
                {
                    <li><a href="@Url.RouteUrl("NewsArchive")">@T("News")</a></li>
                }
                @if (Model.ForumEnabled && Model.DisplayForumsFooterItem)
                {
                    <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
                }
                @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn1).ToList())
                {
                    <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                }
            </ul>
            <div class="social">
		@await Component.InvokeAsync("SocialButtons")
               
            </div>
        </div>
        <div class="footer-middle">
            @await Component.InvokeAsync("NewsletterBox")

            <ul class="footer-nav">
                @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn2).ToList())
                {
                    <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                }
                @if (Model.AllowCustomersToApplyForVendorAccount && Model.DisplayApplyVendorAccountFooterItem)
                {
                    <li><a href="@Url.RouteUrl("ApplyVendorAccount")">@T("Vendors.ApplyAccount")</a></li>
                }
            </ul>

        </div>
        <div class="footer-lower">

            <div class="footer-disclaimer">
                @T("Content.CopyrightNotice", DateTime.Now.Year, Model.StoreName)
            </div>
            @if (!removeCopyright)
            {
                <div class="footer-powered-by">
                    Powered by <a href="http://www.nopcommerce.com/">nopCommerce</a>
                    @*Would you like to remove the "Powered by nopCommerce" link in the bottom of the footer?
                        Find more info here http://www.nopcommerce.com/copyrightremoval.aspx*@
                </div>
            }
            @if (!removeDesignedBy)
            {
                <div class="footer-designed-by">
                    Designed by <a href="http://www.nop-templates.com/" target="_blank">Nop-Templates.com</a>
                </div>
            }
            @if (Model.DisplayTaxShippingInfoFooter)
            {
                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                <div class="footer-tax-shipping">
                    @T(inclTax ? "Footer.TaxShipping.InclTax" : "Footer.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                </div>
            }
            <div class="footer-store-theme">
                @await Component.InvokeAsync("StoreThemeSelector")
            </div>
        </div>
         @await Component.InvokeAsync("Widget", new { widgetZone = "footer" })
    </div>
</div>
