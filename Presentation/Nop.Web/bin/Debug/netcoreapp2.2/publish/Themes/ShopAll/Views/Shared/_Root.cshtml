@{
    Layout = "_Root.Head";

    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    var isHomePage = controllerName.Equals("home", StringComparison.InvariantCultureIgnoreCase);
}

@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyStartHtmlTagAfter })
@await Html.PartialAsync("_Notifications")
<div class="master-wrapper-page">
    @await Component.InvokeAsync("AdminHeaderLinks")
    @await Html.PartialAsync("_JavaScriptDisabledWarning")
    @await Html.PartialAsync("_OldInternetExplorerWarning")
    <div class="overlayOffCanvas"></div>
    <div class="master-header-wrapper">
        @await Html.PartialAsync("_Header")
        <div class="justAFixingDivBefore"></div>
        <div class="header-menu">
            <div class="close-menu">
                <span>Close</span>
            </div>
            @{
                var menuHtml = await Component.InvokeAsync("Widget", new { widgetZone = "theme_header_menu" });
            }
            @if (!String.IsNullOrEmpty(menuHtml.ToHtmlString()))
            {
                @menuHtml
            }
            else
            {
                @await Component.InvokeAsync("TopMenu")
            }
        </div>
        <div class="responsive-nav-wrapper-parent">
            <div class="responsive-nav-wrapper">
                <div class="menu-title">
                    <span>@T("SevenSpikes.Themes.Common.MenuTitle")</span>
                </div>
                <div class="filters-button">
                    <span>@T("SevenSpikes.Themes.Common.Filters")</span>
                </div>
                <div class="search-wrap">
                    <span>@T("Search")</span>
                    <div class="search-box store-search-box">
                        @await Component.InvokeAsync("SearchBox")
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (isHomePage)
    {
        @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_main_slider" });
    }
    <div class="master-wrapper-content">
        <script asp-location="Footer">
            AjaxCart.init(false, '.header-links .cart-qty', '.header-links .wishlist-qty', '#flyout-cart');
        </script>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentBefore })
        @*ajax loading window*@
        <div class="ajax-loading-block-window" style="display: none">
            <div class="loading-image">
            </div>
        </div>
        <div class="master-column-wrapper">
            @RenderBody()
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentAfter })
    </div>
</div>
@await Component.InvokeAsync("Footer")
@await Component.InvokeAsync("EuCookieLaw")
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyEndHtmlTagBefore })
