@using Nop.Core
@using Nop.Core.Domain.Tax
@using Nop.Services.Configuration

@inject IStoreContext storeContext
@inject IWorkContext workContext
@inject ISettingService settingService

@model FooterModel

@{
    var workingLanguageId = workContext.WorkingLanguage.Id;

    var storeId = storeContext.CurrentStore.Id;
    var instagramUrl = settingService.GetSettingByKey("elementthemesettings.instagramurl", String.Empty, storeId, true);
    var pinterestUrl = settingService.GetSettingByKey("elementthemesettings.pinteresturl", String.Empty, storeId, true);
    var vimeoUrl = settingService.GetSettingByKey("elementthemesettings.vimeourl", String.Empty, storeId, true);
    var removeCopyright = settingService.GetSettingByKey("lavellathemesettings.removecopyright", false, storeId, true);
    var removeDesignedBy = settingService.GetSettingByKey("lavellathemesettings.removedesignedby", false, storeId, true);
}

<div class="footer">
    <div class="footer-middle">
        <div class="fm-wrapper">
            <div class="fb-one">
                <h3><span>@T("SevenSpikes.Themes.Lavella.Common.Social")</span></h3>
                @await Component.InvokeAsync("SocialButtons")

                <ul>
                    <li>
                        @T("SevenSpikes.Themes.Lavella.Common.Phone")
                    </li>
                    <li>
                        <a
                            href="javascript:sevenSpikesCore.AntiSpam('@T("SevenSpikes.Themes.Lavella.Common.EmailName")', '@T("SevenSpikes.Themes.Lavella.Common.EmailDomain")')">@T("SevenSpikes.Themes.Lavella.Common.EmailName")@T("SevenSpikes.Themes.Lavella.Common.EmailAt")@T("SevenSpikes.Themes.Lavella.Common.EmailDomain")</a>
                    </li>
                    <li>
                        @T("SevenSpikes.Themes.Lavella.Common.Address")
                    </li>
                </ul>
            </div>
            <div class="fb-two">
                <h3><span>@T("SevenSpikes.Themes.Lavella.Common.CompanyInfo")</span></h3>
                <ul>
                    @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn1).ToList())
                    {
                        <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                    }
                </ul>
            </div>
            <div class="fb-three">
                <h3><span>@T("SevenSpikes.Themes.Lavella.Common.CustomerServices")</span></h3>
                <ul>
                    <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a> </li>
                    @if (Model.SitemapEnabled && Model.DisplaySitemapFooterItem)
                    {
                        <li><a href="@Url.RouteUrl("Sitemap")">@T("Sitemap")</a></li>
                    }
                    @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn2).ToList())
                    {
                        <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                    }
                    @if (Model.AllowCustomersToCheckGiftCardBalance)
                    {
                        <li><a href="@Url.RouteUrl("CheckGiftCardBalance")">@T("CheckGiftCardBalance")</a></li>
                    }
                </ul>
            </div>
            <div class="fb-four">
                <h3><span>@T("SevenSpikes.Themes.Lavella.Common.OurOffers")</span></h3>
                <ul>
                    @if (Model.NewProductsEnabled && Model.DisplayNewProductsFooterItem)
                    {
                        <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
                    }
                    @if (Model.RecentlyViewedProductsEnabled && Model.DisplayRecentlyViewedProductsFooterItem)
                    {
                        <li><a href="@Url.RouteUrl("RecentlyViewedProducts")">@T("Products.RecentlyViewedProducts")</a></li>
                    }
                    @if (Model.CompareProductsEnabled && Model.DisplayCompareProductsFooterItem)
                    {
                        <li><a href="@Url.RouteUrl("CompareProducts")">@T("Products.Compare.List")</a></li>
                    }
                    <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
                    @if (Model.AllowCustomersToApplyForVendorAccount && Model.DisplayApplyVendorAccountFooterItem)
                    {
                        <li><a href="@Url.RouteUrl("ApplyVendorAccount")">@T("Vendors.ApplyAccount")</a></li>
                    }
                    @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn3).ToList())
                    {
                        <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                    }
                </ul>
            </div>
        </div>
    </div>
    <div class="footer-lower">
        @if (!removeCopyright)
        {
            <div class="footer-powered-by">
                Powered by <a href="http://www.nopcommerce.com/">nopCommerce</a>
                @*Would you like to remove the "Powered by nopCommerce" link in the bottom of the footer?
                    Find more info here http://www.nopcommerce.com/copyrightremoval.aspx*@
            </div>
        }
        @if (!removeDesignedBy)
        {
            <div class="footer-designed-by">
                Designed by <a href="http://www.nop-templates.com/" target="_blank">Nop-Templates.com</a>
            </div>
        }
        <div class="footer-disclaimer">
            @T("Content.CopyrightNotice", DateTime.Now.Year, Model.StoreName)
        </div>
        @if (Model.DisplayTaxShippingInfoFooter)
        {
            var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
            <div class="footer-tax-shipping">
                @T(inclTax ? "Footer.TaxShipping.InclTax" : "Footer.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName
            = Html.GetTopicSeName("shippinginfo") }))
            </div>
        }
        <div class="accepted-payment-methods">
            <ul>
                <li class="method1"></li>
                <li class="method2"></li>
                <li class="method3"></li>
                <li class="method4"></li>
            </ul>
        </div>

        <div class="footer-storetheme">@await Component.InvokeAsync("StoreThemeSelector")</div>

    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.Footer })
</div>
